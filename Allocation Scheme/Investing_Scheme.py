"""

@created 05/15/2023 - 12:39 AM
@author Kaiwen Zhou
"""
import pandas as pd
from datetime import timedelta
from Strategy_Base_Single_Period import Strategy_Base_Single_Period


def investing(date_start_estimation=None,
              date_end_estimation=None,
              date_start_investing=None,
              date_end_investing=None,
              df_data=None,
              minimum_interval=None,  # timedelta
              tau_estimation=1,
              tau_horizon=3,
              initial_wealth=1000,
              strategy_name=None,
              ):
    ### Normally, the date start investing is equal to the date end estimation
    if date_start_investing is None:
        date_start_investing = date_end_estimation

    ### Find the number of investment decision we have to make
    number_of_decision_needed = int((date_end_investing-date_end_estimation)/minimum_interval)

    ### Create a DataFrame to store the related data for this investment scheme
    df_investing = pd.DataFrame(index=df_data.index, columns=[strategy_name])
    df_investing = df_investing[(df_investing.index >= date_end_estimation)]
    # initialize wealth
    df_investing[strategy_name][0] = initial_wealth  # initial wealth

    for i in range(0, number_of_decision_needed, tau_horizon):
        initial_wealth = df_investing[strategy_name][i]
        print('initial wealth is: ', initial_wealth)
        # update the end date for estimation
        end_estimation_date = date_end_estimation + i*minimum_interval
        optimal_allocation = Strategy_Base_Single_Period().MVO(df_data=df_data,
                                                               initial_wealth=initial_wealth,
                                                               tau_estimate=1,
                                                               tau_horizon=tau_horizon,
                                                               date_start_estimation=date_start_estimation,
                                                               date_end_estimation=end_estimation_date,
                                                               estimator_type='shrinkage',
                                                               obj_type='absolute wealth',
                                                               asset_class='equity',
                                                               CE_type='power',
                                                               utility_coef=-9,
                                                               N_MC=100,
                                                               v_inf=1,
                                                               v_sup=100,
                                                               v_step=1
                                                               )

        ################# Calculate the PnL generated by holding the optimal portfolio
        # current (buy-in) price
        price_current = df_data[df_data.index == end_estimation_date].values.squeeze()
        # investment horizon (sell-off) price
        price_investment_horizon = df_data[df_data.index == end_estimation_date + tau_horizon*minimum_interval].values.squeeze()
        # PnL generated by holding the optimal portfolio
        PnL = optimal_allocation@(price_investment_horizon-price_current)
        print(PnL)
        # update your absolute wealth
        updated_wealth = initial_wealth + PnL
        print('updated_wealth is: ', updated_wealth)
        df_investing[strategy_name][i+tau_horizon] = updated_wealth
